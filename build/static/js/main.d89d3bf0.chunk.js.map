{"version":3,"sources":["logo.svg","components/common/Alert.js","components/common/Navbar.js","components/common/Button.js","components/common/Card.js","components/Utility.js","components/Wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","class","type","role","message","Navbar","className","mode","href","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onChange","toggleMode","htmlFor","Button","onClick","event","name","Card","style","count","Utility","useState","content","setContent","text","setText","upper","setUpper","lower","setLower","wordCapital","setWordCapital","trim","setTrim","words","setWords","characters","setCharacters","textHandler","target","value","length","split","toLowerCaseHandler","toUpperCaseHandler","wordCapitalize","trimHandler","toUpperCase","showAlert","toLocaleLowerCase","newText","join","newContent","map","element","index","charAt","slice","placeholder","rows","backgroundColor","color","onPaste","defaultValue","navigator","clipboard","writeText","readOnly","Wrapper","setMode","setAlert","alertType","alertMessage","setTimeout","setInterval","document","title","body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d89d3bf0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\n\nexport default function Alert(props) {\n  return (\n    props.alert && (\n      <>\n        <div\n          class={`alert alert-${props.alert.type} alert-dismissible fade show`}\n          role=\"alert\"\n        >\n          {props.alert.message}\n        </div>\n      </>\n    )\n  );\n}\n","import React from \"react\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          TextUtility\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                About\n              </a>\n            </li>\n          </ul>\n          <form className=\"d-flex\">\n            {/* <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button> */}\n\n            <div\n              className={`form-check form-switch text-${\n                props.mode === \"light\" ? \"dark\" : \"light\"\n              }`}\n            >\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                role=\"switch\"\n                onChange={props.toggleMode}\n                id=\"toggleMode\"\n              />\n              <label className=\"form-check-label\" htmlFor=\"toggleMode\">\n                 {props.mode === \"light\" ? \"Toggle Mode To Dark\" : \"Toggle Mode To Light\"}\n              </label>\n            </div>\n          </form>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nexport default function Button(props) {\n  return (\n    <button className=\"btn btn-sm btn-primary mt-2 mx-1\" onClick={props.event}>\n      {props.name}\n    </button>\n  );\n}\n","import React from \"react\";\n\nexport default function Card(props) {\n  return (\n    <div className=\"col-sm-12 mt-2\">\n      <div className=\"card\" style={props.style}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.name}</h5>\n          <a href=\"/\" className=\"btn btn-primary\">\n            {props.count}\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"./common/Button\";\nimport Card from \"./common/Card\";\n\nexport default function Utility(props) {\n  const [content, setContent] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [upper, setUpper] = useState(false);\n  const [lower, setLower] = useState(false);\n  const [wordCapital, setWordCapital] = useState(false);\n  const [trim, setTrim] = useState(false);\n  const [words, setWords] = useState(0);\n  const [characters, setCharacters] = useState(0);\n\n  const textHandler = (event) => {\n    setContent(event.target.value);\n    setWords(text.length);\n    setCharacters(text.split(\" \").length);\n    if (lower) {\n      toLowerCaseHandler();\n    } else if (upper) {\n      toUpperCaseHandler();\n    } else if (wordCapital) {\n      wordCapitalize();\n    } else if (trim) {\n      trimHandler();\n    } else {\n      setText(event.target.value);\n    }\n  };\n\n  const toUpperCaseHandler = () => {\n    setUpper(true);\n    setLower(false);\n    setWordCapital(false);\n    setTrim(false);\n    setText(content.toUpperCase());\n    props.showAlert(\"success\", \"Text has been set to upper case\");\n  };\n\n  const toLowerCaseHandler = () => {\n    setUpper(false);\n    setLower(true);\n    setWordCapital(false);\n    setTrim(false);\n    setText(content.toLocaleLowerCase());\n    props.showAlert(\"success\", \"Text has been set to lower case\");\n  };\n\n  const copyHandler = () => {\n    navigator.clipboard.writeText(text);\n    props.showAlert(\"success\", \"Formatted text has been copied in clipboard\");\n  };\n\n  const copyOriginalHandler = () => {\n    if (content) {\n      navigator.clipboard.writeText(content);\n      props.showAlert(\"success\", \"Original text has been copied in clipboard.\");\n    }\n  };\n\n  const clearAllNewHandler = () => {\n    let newText = \"\";\n    // setContent(newText);\n    setText(newText);\n    props.showAlert(\"success\", \"Formatted text has been cleared.\");\n  };\n\n  const trimHandler = () => {\n    setUpper(false);\n    setLower(false);\n    setWordCapital(false);\n    setTrim(true);\n    let newText = content.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"success\", \"Extra spaces has been removed.\");\n  };\n\n  const wordCapitalize = () => {\n    setUpper(false);\n    setLower(false);\n    setWordCapital(true);\n    setTrim(false);\n    let newContent = content.split(\" \");\n    newContent = newContent.map(function (element, index) {\n      return element.charAt(0).toUpperCase() + element.slice(1);\n    });\n    newContent = newContent.join(\" \");\n    setText(newContent);\n    props.showAlert(\"success\", \"Each letter of all the words has been capitalized.\");\n  };\n\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row\">\n        <div className=\"col-sm-5\">\n          <h1>Input:</h1>\n          <textarea\n            className=\"form-control mt-3\"\n            placeholder=\"Please provide your input...\"\n            rows=\"8\"\n            onChange={textHandler}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"#8e8b9f\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\n            }}\n            onPaste={textHandler}\n            defaultValue={content}\n          ></textarea>\n\n          <Button name=\"To Upper Case\" event={toUpperCaseHandler} />\n          <Button name=\"To Lower Case\" event={toLowerCaseHandler} />\n          <Button name=\"Word Capitalize\" event={wordCapitalize} />\n          <Button name=\"Trim\" event={trimHandler} />\n          <Button name=\"Copy Text\" event={copyOriginalHandler} />\n        </div>\n        <div className=\"col-sm-2 mt-5\">\n          <Card\n            name=\"Characters Count\"\n            style={{ color: props.mode === \"dark\" ? \"#534d6e\" : \"black\" }}\n            count={words}\n          />\n          <Card\n            name=\"Words Count\"\n            style={{ color: props.mode === \"dark\" ? \"#534d6e\" : \"black\" }}\n            count={characters}\n          />\n        </div>\n        <div className=\"col-sm-5 mt-2\">\n          <h1>Output:</h1>\n\n          <textarea\n            className=\"form-control\"\n            placeholder=\"Output...\"\n            rows=\"8\"\n            readOnly\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"#8e8b9f\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\n            }}\n            defaultValue={text}\n          ></textarea>\n\n          <Button name=\"Copy Text\" event={copyHandler} />\n          <Button name=\"Clear All\" event={clearAllNewHandler} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Alert from \"./common/Alert\";\nimport Navbar from \"./common/Navbar\";\nimport Utility from \"./Utility\";\n\nexport default function Wrapper() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (alertType, alertMessage) => {\n    setAlert({\n      type: alertType,\n      message: alertMessage,\n    });\n    setTimeout(() => {\n      setAlert(null);\n      setInterval(() => {\n        document.title = \"Alert Activated\";\n      }, 2000);\n    }, 2000);\n\n    setInterval(() => {\n      document.title = \"Yeah!\";\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#534d6e\";\n      document.body.style.color = \"white\";\n      showAlert(\"success\", \"Dark mode has been activated.\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"success\", \"Light mode has been activated.\");\n    }\n  };\n\n  return (\n    <>\n      <Navbar mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <Utility mode={mode} showAlert={showAlert} />\n    </>\n  );\n}\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}